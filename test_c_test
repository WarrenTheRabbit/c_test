#!/bin/bash

# This is the file test_c_test.
# It is the starting point for TDD of a shell-based
# test runner for C programs.


test_pass_for_zero_argument_program() {
	echo ++++++++++++++++++++++++++++++++++++++++++++++
	echo test_pass_for_zero_argument_program
	echo ++++++++++++++++++++++++++++++++++++++++++++++

	# Arrange.        
	local expected_output=$(cat <<EOF
Testing program1() == ./program1 is a C program
PASS
EOF
)
	# Act.
        local output=$(./c_test "$@")

	# Assert.
	if [[ "$output" == "$expected_output" ]]; then
		echo "Pass."
	else
		echo "Fail."
		echo "********* Expected ***********"
		echo "$expected_output"
		echo "*********  Output ************"
		echo "$output"
	fi
}


test_pass_for_multi_argument_program() {
	echo ++++++++++++++++++++++++++++++++++++++++++++++
	echo test_pass_for_multi_argument_program
	echo ++++++++++++++++++++++++++++++++++++++++++++++

	# Arrange.
 	local expected_output=$(cat <<EOF
Testing mul(2 3) == 6
PASS
EOF
)	
	# Act.
	local output=$(./c_test "$@")

	# Assert.
	if [[ "$output" == "$expected_output" ]]; then
		echo "    Pass."
        else
                echo "    Fail."
                echo "    ********* Expected ***********"
                echo "    $expected_output"
                echo "    *********  Output ************"
                echo "    $output"
	fi
}

test_fail_for_zero_argument_program() {
	echo ++++++++++++++++++++++++++++++++++++++++++++++
	echo test_pass_for_zero_argument_program
	echo ++++++++++++++++++++++++++++++++++++++++++++++

	# Arrange.        
	local expected_output=$(cat <<EOF
Testing program1() == ./program1 is a C program
PASS
EOF
)
	# Act.
        local output=$(./c_test "$@")

	# Assert.
	if [[ "$output" == "$expected_output" ]]; then
		echo "    Pass."
	else
		echo "    Fail."
		echo "    ********* Expected ***********"
		echo "    $expected_output"
		echo "    *********  Output ************"
		echo "    $output"
	fi
}


test_fail_for_multi_argument_program() {
	echo ++++++++++++++++++++++++++++++++++++++++++++++
	echo test_pass_for_multi_argument_program
	echo ++++++++++++++++++++++++++++++++++++++++++++++

	# Arrange.
 	local expected_output=$(cat <<EOF
Testing mul(2 3) == 6
PASS
EOF
)	
	# Act.
	local output=$(./c_test "$@")

	# Assert.
	if [[ "$output" == "$expected_output" ]]; then
		echo "    Pass."
        else
                echo "    Fail."
                echo "    ********* Expected ***********"
                echo "    $expected_output"
                echo "    *********  Output ************"
                echo "    $output"
	fi
}
test_fail_for_multi_argument_program mul 2 3 7
echo 
test_fail_for_zero_argument_program program2 './program1 is a C program'
